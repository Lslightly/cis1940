module Glof where
-- | skips
-- >>> skips "ABCD"
-- ["ABCD","BD","C","D"]
-- >>> skips "hello!"
-- ["hello!","el!","l!","l","o","!"]
-- >>> skips [1]
-- [[1]]
-- >>> skips [True,False]
-- [[True,False],[False]]
-- >>> skips []
-- []
skips :: [a] -> [[a]]
slice :: [a] -> Int -> [a]
slice list n
  | length list < n = []
  | otherwise = list !!(n-1) : slice (drop n list) n
skips list = map (slice list) [1..length list]
{- generated by chatgpt
skips :: [a] -> [[a]]
skips xs = [every n xs | n <- [1..length xs]]
  where
    every n = map snd . filter ((== 0) . (`mod` n) . fst) . zip [1..]
-}
localMaxima :: [Integer] -> [Integer]
localMaxima xs = map snd $ filter greater (zip [1..] (drop 1 xs))
    where greater (fst, snd) = (fst < length xs -1) && (xs !!(fst-1) < snd) && (snd > xs !!(fst+1))
-- generated by chatgpt
-- localMaxima (x:y:z:xs)
--     | y > x && y > z = y : localMaxima (y:z:xs)
--     | otherwise = localMaxima (y:z:xs)
-- localMaxima _ = []

-- | localMaxima
-- >>> localMaxima [2,9,5,6,1]
-- [9,6]
-- >>> localMaxima [2,3,4,1,5]
-- [4]
-- >>> localMaxima [1,2,3,4,5]
-- []

histogram :: [Integer] -> String
count :: [Integer] -> [Int]
count xs = map (\x -> length $ filter (==x) xs) [0..9]
mapStar :: [Int] -> String
mapStar xs
    | not (any (>0) xs) = ""
    | otherwise = mapStar (map (\x -> x-1) xs) ++ map (\x -> if x > 0 then '*' else ' ') xs ++ "\n"
histogram xs = mapStar (count xs) ++ "==========\n0123456789\n"